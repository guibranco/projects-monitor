name: Deploy via FTP with Database Migrations

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    name: 📦 Deploy Application to FTP
    runs-on: ubuntu-latest
    outputs:
      fullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Install GitVersion
        uses: gittools/actions/gitversion/setup@v4.0.1
        with:
          versionSpec: "6.x"

      - name: 🏷️ Determine Version Number
        id: gitversion
        uses: gittools/actions/gitversion/execute@v4.0.1

      - name: 💾 Cache Composer Dependencies
        uses: actions/cache@v4
        with:
          path: /tmp/composer-cache
          key: ${{ runner.os }}-${{ hashFiles('**/composer.lock') }}

      - name: 📚 Install PHP Dependencies
        uses: "php-actions/composer@v6"
        with:
          php_extensions: sockets
          dev: no
          progress: yes
          working_dir: "./Src/"

      - name: 📁 Create Cache Directory
        run: |
          mkdir -p Src/api/v1/cache
          cd  Src/api/v1/cache
          echo "Deny from all" >> .htaccess

      - name: 🔒 Create .htaccess Security File
        run: |
          cd Src
          mkdir -p secrets
          cd secrets
          echo "Deny from all" >> .htaccess

      - name: 🔑 Generate AppVeyor Configuration
        run: |
          cd Src/secrets
          echo "<?php" >> appVeyor.secrets.php
          echo "\$appVeyorApiKey = \"${{ secrets.APPVEYOR_API_KEY }}\";" >> appVeyor.secrets.php
      
      - name: 🔑 Generate CPanel Configuration
        run: |
          cd Src/secrets
          echo "<?php" >> cPanel.secrets.php
          echo "\$cPanelApiToken     = \"${{ secrets.CPANEL_API_TOKEN }}\";" >> cPanel.secrets.php
          echo "\$cPanelBaseUrl      = \"${{ secrets.CPANEL_BASE_URL }}\";" >> cPanel.secrets.php
          echo "\$cPanelUsername     = \"${{ secrets.CPANEL_USERNAME }}\";" >> cPanel.secrets.php
          echo "\$cPanelEmailAccount = \"${{ secrets.CPANEL_EMAIL_ACCOUNT }}\";" >> cPanel.secrets.php
      
      - name: 🔑 Generate GitHub Secrets Configuration
        run: |
          cd Src/secrets
          echo "<?php" >> gitHub.secrets.php
          echo "\$gitHubToken = \"${{ secrets.GH_TOKEN }}\";" >> gitHub.secrets.php

      - name: 🔑 Generate HealthChecks.io Configuration
        run: |
          cd Src/secrets
          echo "<?php" >> healthChecksIo.secrets.php
          echo "\$healthChecksIoWriteKeys[] = \"${{ secrets.HEALTHCHECKSIO_WK1 }}\";" >> healthChecksIo.secrets.php
          echo "\$healthChecksIoWriteKeys[] = \"${{ secrets.HEALTHCHECKSIO_WK2 }}\";" >> healthChecksIo.secrets.php
          echo "\$healthChecksIoWriteKeys[] = \"${{ secrets.HEALTHCHECKSIO_WK3 }}\";" >> healthChecksIo.secrets.php

      - name: 🔑 Generate Ip2WhoIs Configuration
        run: |
          cd Src
          mkdir -p secrets
          cd secrets
          echo "<?php" >> Ip2WhoIsSecrets.php
          echo "namespace GuiBranco\ProjectsMonitor\secrets;" >> Ip2WhoIsSecrets.php
          echo "class Ip2WhoIsSecrets" >> Ip2WhoIsSecrets.php
          echo "{" >> Ip2WhoIsSecrets.php
          echo "    public static \$ApiKey = \"${{ secrets.IP2WHOIS_API_KEY }}\";" >> Ip2WhoIsSecrets.php
          echo "}" >> Ip2WhoIsSecrets.php

      - name: 🔑 Generate MySQL Database Configuration
        run: |
          cd Src
          mkdir -p secrets
          cd secrets
          echo "<?php" >> mySql.secrets.php
          echo "\$mySqlHost     = \"127.0.0.1\";" >> mySql.secrets.php
          echo "\$mySqlUser     = \"${{ secrets.MYSQL_USER }}\";" >> mySql.secrets.php
          echo "\$mySqlPassword = \"${{ secrets.MYSQL_PASSWORD }}\";" >> mySql.secrets.php
          echo "\$mySqlDatabase = \"${{ secrets.MYSQL_DATABASE }}\";" >> mySql.secrets.php

      - name: 🔑 Generate Postman Configuration
        run: |
          cd Src
          mkdir -p secrets
          cd secrets
          echo "<?php" >> postman.secrets.php
          echo "\$postmanToken = \"${{ secrets.POSTMAN_API_KEY }}\";" >> postman.secrets.php

      - name: 🔑 Generate RabbitMQ Configuration
        run: |
          SECRETS_CONTEXT='${{ toJson(secrets) }}'
          cd Src
          mkdir -p secrets
          cd secrets
          echo "<?php" >> rabbitMq.secrets.php
          rabbitmq_values=$(echo "$SECRETS_CONTEXT" | jq -S '.' | jq -r 'to_entries | map(select(.key | startswith("RABBITMQ_"))) | .[].value')

          for value in $rabbitmq_values; do
              value_final=$(echo $value | sed 's/\\n/ /g')
              echo "\$rabbitMqConnectionStrings[] = \"$value_final\";" >> rabbitMq.secrets.php
          done

      - name: 🔑 Generate SSH Configuration
        run: |
          cd Src
          mkdir -p secrets
          cd secrets
          echo "<?php" >> ssh.secrets.php
          echo "\$sshHost        = \"${{ secrets.SSH_HOST }}\";" >> ssh.secrets.php
          echo "\$sshUsername    = \"${{ secrets.SSH_USERNAME }}\";" >> ssh.secrets.php
          echo "\$sshPrivateKey  = \"${{ secrets.SSH_PRIVATE_KEY }}\";" >> ssh.secrets.php

      - name: 🔑 Generate UpTimeRobot Configuration
        run: |
          cd Src
          mkdir -p secrets
          cd secrets
          echo "<?php" >> upTimeRobot.secrets.php
          echo "\$upTimeRobotToken = \"${{ secrets.UPTIMEROBOT_TOKEN }}\";" >> upTimeRobot.secrets.php

      - name: 🔑 Generate Webhooks Configuration
        run: |
          cd Src
          mkdir -p secrets
          cd secrets
          echo "<?php" >> webhooks.secrets.php
          echo "\$webhooksApiUrl   = \"${{ secrets.WEBHOOKS_API_URL }}\";" >> webhooks.secrets.php
          echo "\$webhooksApiToken = \"${{ secrets.WEBHOOKS_API_TOKEN }}\";" >> webhooks.secrets.php

      - name: 📝 Create Version File for API
        run: |
          cd Src       
          echo ${{ env.fullSemVer }} > version.txt

      - name: 📦 Package Files for Deployment
        run: |
          cd Src
          zip -r deploy.zip . -x install.php
          cd ..
          mkdir deploy
          mv Src/deploy.zip deploy
          cp "Src/install.php" deploy

      - name: 📤 Upload Application via FTP
        uses: sebastianpopp/ftp-action@releases/v2
        with:
          host: ${{ secrets.FTP_SERVER }}
          user: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          localDir: "deploy/"
          remoteDir: "/"

      - name: 🚀 Trigger Installation Process
        run: curl --fail-with-body "${{ secrets.INSTALLATION_ENDPOINT }}install.php"

  database_migrations:
    name: 🗄️ Run Database Migrations
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: write
    needs: [deploy]

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect Changes in SQL Scripts
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            sql:
              - "Sql/**"
              - "Tools/**"
      
      - name: 🔐 Acquire WireGuard Connection Lock
        uses: guibranco/github-artifact-lock-action@v3.0.7
        with:
          lock-name: wireguard-connection

      - name: 🔌 Establish WireGuard VPN Connection
        shell: bash
        run: |
          echo "WIREGUARD_CONNECTED=true" >> $GITHUB_ENV
          sudo apt-get update
          sudo apt-get install -y wireguard wireguard-tools resolvconf
          echo "${{ secrets.WIREGUARD_CONFIG }}" > wg0.conf
          sudo chmod 600 wg0.conf
          sudo modprobe wireguard
          sudo wg-quick up ./wg0.conf

      - name: 🔍 Check for Schema Version Table
        id: new_installation
        env:
          MYSQL_PWD: ${{ secrets.MYSQL_PASSWORD_MIGRATION }}
        run: |
          chmod +x Tools/db-check.sh
          Tools/db-check.sh "${{ secrets.MYSQL_SERVER }}" "${{ secrets.MYSQL_USER_MIGRATION }}" "${{ secrets.MYSQL_DATABASE }}"

      - name: 🔄 Execute Database Migration Scripts
        env:
          MYSQL_PWD: ${{ secrets.MYSQL_PASSWORD_MIGRATION }}
        run: |
          chmod +x Tools/db-migration.sh
          Tools/db-migration.sh Sql "${{ secrets.MYSQL_SERVER }}" "${{ secrets.MYSQL_USER_MIGRATION }}" "${{ secrets.MYSQL_DATABASE }}"

      - name: 🔌 Disconnect WireGuard VPN
        if: always()
        shell: bash
        run: sudo wg-quick down ./wg0.conf

      - name: 🔓 Release WireGuard Connection Lock
        if: always()
        uses: guibranco/github-artifact-lock-action/release-lock@v3.0.7
        with:
          lock-name: wireguard-connection

  automated-api-tests:
    name: 🧪 Run Automated API Tests
    runs-on: ubuntu-latest
    needs: [deploy, database_migrations]

    steps:
      - name: 📋 Initialize Test Process
        run: echo "Running API tests job"

      - name: 🔧 Install Postman CLI
        if: ${{ vars.POSTMAN_ENABLED == 'true' }}
        run: curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh

      - name: 🔑 Authenticate with Postman
        if: ${{ vars.POSTMAN_ENABLED == 'true' }}
        run: postman login --with-api-key ${{ secrets.POSTMAN_API_KEY }}

      - name: 🧪 Execute Postman Collection Tests
        if: ${{ vars.POSTMAN_ENABLED == 'true' }}
        run: postman collection run 23511-01109172-13a0-4cdb-bd0c-18a71d624a48 -e 23511-95105c79-d4eb-4388-9ff9-eb5dee83fdcf

  create_release:
    name: 📢 Create GitHub Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: [deploy, database_migrations, automated-api-tests]
    env:
      fullSemVer: ${{ needs.deploy.outputs.fullSemVer }}

    steps:
      - name: 🏷️ Create and Publish Release
        uses: ncipollo/release-action@v1.18.0
        with:
          skipIfReleaseExists: true
          allowUpdates: false
          draft: false
          makeLatest: true
          tag: v${{ env.fullSemVer }}
          name: Release v${{ env.fullSemVer }}
          generateReleaseNotes: true
          body: Release ${{ env.fullSemVer }} of ${{ github.repository }}
