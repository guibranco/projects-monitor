name: Deploy via ftp

on:
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  deploy:
    name: Deploy to FTP
    runs-on: ubuntu-latest
    outputs:
      semVer: ${{ steps.gitversion.outputs.semVer }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            src:
              - "Src/**"

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v1
        with:
          versionSpec: "5.x"

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v1
        with:
          useConfigFile: true

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        if: steps.changes.outputs.src == 'true' || github.event_name == 'workflow_dispatch'
        with:
          path: /tmp/composer-cache
          key: ${{ runner.os }}-${{ hashFiles('**/composer.lock') }}

      - name: Install dependencies
        uses: "php-actions/composer@v6"
        if: steps.changes.outputs.src == 'true' || github.event_name == 'workflow_dispatch'
        with:
          php_extensions: sockets
          dev: no
          progress: yes
          working_dir: "./Src/"

      - name: Create .htaccess secrets file
        if: steps.changes.outputs.src == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          cd Src
          mkdir -p secrets
          cd secrets
          echo "Deny from all" >> .htaccess

      - name: Create CPanel secrets file
        if: steps.changes.outputs.src == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          cd Src
          mkdir -p secrets
          cd secrets
          echo "<?php" >> cPanel.secrets.php
          echo "\$cPanelApiToken  = \"${{ secrets.CPANEL_API_TOKEN }}\";" >> cPanel.secrets.php
          echo "\$cPanelBaseUrl   = \"${{ secrets.CPANEL_BASE_URL }}\";" >> cPanel.secrets.php
          echo "\$cPanelUsername  = \"${{ secrets.CPANEL_USERNAME }}\";" >> cPanel.secrets.php

      - name: Create GitHub secrets file
        if: steps.changes.outputs.src == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          cd Src
          mkdir -p secrets
          cd secrets
          echo "<?php" >> gitHub.secrets.php
          echo "\$gitHubToken = \"${{ secrets.GH_TOKEN }}\";" >> gitHub.secrets.php

      - name: Create HealthCheck secrets file
        if: steps.changes.outputs.src == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          cd Src
          mkdir -p secrets
          cd secrets
          echo "<?php" >> healthChecksIo.secrets.php
          echo "\$healthChecksIoReadKeys[] = \"${{ secrets.HEALTHCHECKSIO_RK1 }}\";" >> healthChecksIo.secrets.php
          echo "\$healthChecksIoReadKeys[] = \"${{ secrets.HEALTHCHECKSIO_RK2 }}\";" >> healthChecksIo.secrets.php
          echo "\$healthChecksIoReadKeys[] = \"${{ secrets.HEALTHCHECKSIO_RK3 }}\";" >> healthChecksIo.secrets.php

      - name: Create MySQL secrets file
        if: steps.changes.outputs.src == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          cd Src
          mkdir -p secrets
          cd secrets
          echo "<?php" >> mySql.secrets.php
          echo "\$mySqlHost     = \"127.0.0.1\";" >> mySql.secrets.php
          echo "\$mySqlUser     = \"${{ secrets.MYSQL_USER }}\";" >> mySql.secrets.php
          echo "\$mySqlPassword = \"${{ secrets.MYSQL_PASSWORD }}\";" >> mySql.secrets.php
          echo "\$mySqlDatabase = \"${{ secrets.MYSQL_DATABASE }}\";" >> mySql.secrets.php

      - name: Create RabbitMQ secrets file
        if: steps.changes.outputs.src == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          cd Src
          mkdir -p secrets
          cd secrets
          echo "<?php" >> rabbitMq.secrets.php
          echo "\$rabbitMqConnectionStrings[] = \"${{ secrets.RABBITMQ_CS1 }}\";" >> rabbitMq.secrets.php
          echo "\$rabbitMqConnectionStrings[] = \"${{ secrets.RABBITMQ_CS2 }}\";" >> rabbitMq.secrets.php
          echo "\$rabbitMqConnectionStrings[] = \"${{ secrets.RABBITMQ_CS3 }}\";" >> rabbitMq.secrets.php
          echo "\$rabbitMqConnectionStrings[] = \"${{ secrets.RABBITMQ_CS4 }}\";" >> rabbitMq.secrets.php
          echo "\$rabbitMqConnectionStrings[] = \"${{ secrets.RABBITMQ_CS5 }}\";" >> rabbitMq.secrets.php
          echo "\$rabbitMqConnectionStrings[] = \"${{ secrets.RABBITMQ_CS6 }}\";" >> rabbitMq.secrets.php
          echo "\$rabbitMqConnectionStrings[] = \"${{ secrets.RABBITMQ_CS7 }}\";" >> rabbitMq.secrets.php

      - name: Create UpTimeRobot secrets file
        if: steps.changes.outputs.src == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          cd Src
          mkdir -p secrets
          cd secrets
          echo "<?php" >> upTimeRobot.secrets.php
          echo "\$upTimeRobotToken = \"${{ secrets.UPTIMEROBOT_TOKEN }}\";" >> upTimeRobot.secrets.php

      - name: Create Webhooks secrets file
        if: steps.changes.outputs.src == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          cd Src
          mkdir -p secrets
          cd secrets
          echo "<?php" >> webhooks.secrets.php
          echo "\$webhooksApiToken = \"${{ secrets.WEBHOOKS_API_TOKEN }}\";" >> webhooks.secrets.php

      - name: Upload files
        if: steps.changes.outputs.src == 'true' || github.event_name == 'workflow_dispatch'
        uses: sebastianpopp/ftp-action@releases/v2
        with:
          host: ${{ secrets.FTP_SERVER }}
          user: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          localDir: "Src/"
          remoteDir: "/"

  database_migrations:
    name: Database migrations
    runs-on: ubuntu-latest
    needs: [deploy]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check changes in Sql folder
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            sql:
              - "Sql/**"
              - "Tools/**"

      - name: Attach WireGuard connection
        shell: bash
        run: |
          sudo apt install resolvconf
          sudo apt install wireguard
          echo "${{ secrets.WIREGUARD_CONFIG }}" > wg0.conf
          sudo chmod 600 wg0.conf
          sudo wg-quick up ./wg0.conf

      - name: Check if schema version table exists
        id: new_installation
        if: steps.changes.outputs.sql == 'true' || github.event_name == 'workflow_dispatch'
        env:
          MYSQL_PWD: ${{ secrets.MYSQL_PASSWORD_MIGRATION }}
        run: |
          chmod +x Tools/db-check.sh
          Tools/db-check.sh "${{ secrets.MYSQL_SERVER }}" "${{ secrets.MYSQL_USER_MIGRATION }}" "${{ secrets.MYSQL_DATABASE }}"

      - name: Run database migrations
        if: steps.changes.outputs.sql == 'true' || github.event_name == 'workflow_dispatch' || steps.new_installation.outputs.not_found == 'true'
        env:
          MYSQL_PWD: ${{ secrets.MYSQL_PASSWORD_MIGRATION }}
        run: |
          chmod +x Tools/db-migration.sh
          Tools/db-migration.sh Sql "${{ secrets.MYSQL_SERVER }}" "${{ secrets.MYSQL_USER_MIGRATION }}" "${{ secrets.MYSQL_DATABASE }}"

      - name: Detach WireGuard connection
        shell: bash
        run: sudo wg-quick down ./wg0.conf

  create_release:
    name: Create release
    needs: [deploy, database_migrations]
    env:
      SEMVER: ${{ needs.deploy.outputs.semVer }}
    runs-on: ubuntu-latest

    steps:
      - name: Create Release
        uses: ncipollo/release-action@v1.14.0
        with:
          skipIfReleaseExists: true
          allowUpdates: false
          draft: false
          makeLatest: true
          tag: v${{ env.SEMVER }}
          name: Release v${{ env.SEMVER }}
          generateReleaseNotes: true
          body: Release ${{ env.SEMVER }} of ${{ github.repository }}
